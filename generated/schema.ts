// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Option extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Option entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Option entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Option", id.toString(), this);
  }

  static load(id: string): Option | null {
    return store.get("Option", id) as Option | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get strike(): BigInt {
    let value = this.get("strike");
    return value.toBigInt();
  }

  set strike(value: BigInt) {
    this.set("strike", Value.fromBigInt(value));
  }

  get optionType(): string {
    let value = this.get("optionType");
    return value.toString();
  }

  set optionType(value: string) {
    this.set("optionType", Value.fromString(value));
  }

  get notional(): BigInt {
    let value = this.get("notional");
    return value.toBigInt();
  }

  set notional(value: BigInt) {
    this.set("notional", Value.fromBigInt(value));
  }

  get maturity(): BigInt {
    let value = this.get("maturity");
    return value.toBigInt();
  }

  set maturity(value: BigInt) {
    this.set("maturity", Value.fromBigInt(value));
  }

  get feeToken(): string {
    let value = this.get("feeToken");
    return value.toString();
  }

  set feeToken(value: string) {
    this.set("feeToken", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get maxFeeAmount(): BigInt {
    let value = this.get("maxFeeAmount");
    return value.toBigInt();
  }

  set maxFeeAmount(value: BigInt) {
    this.set("maxFeeAmount", Value.fromBigInt(value));
  }

  get feeAmount(): BigInt | null {
    let value = this.get("feeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("feeAmount");
    } else {
      this.set("feeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get amount0(): BigInt | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigInt(value as BigInt));
    }
  }

  get amount1(): BigInt | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigInt(value as BigInt));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get token0(): string | null {
    let value = this.get("token0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token0(value: string | null) {
    if (value === null) {
      this.unset("token0");
    } else {
      this.set("token0", Value.fromString(value as string));
    }
  }

  get token1(): string | null {
    let value = this.get("token1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token1(value: string | null) {
    if (value === null) {
      this.unset("token1");
    } else {
      this.set("token1", Value.fromString(value as string));
    }
  }

  get poolFee(): BigInt | null {
    let value = this.get("poolFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolFee(value: BigInt | null) {
    if (value === null) {
      this.unset("poolFee");
    } else {
      this.set("poolFee", Value.fromBigInt(value as BigInt));
    }
  }

  get submittedTxHash(): Bytes {
    let value = this.get("submittedTxHash");
    return value.toBytes();
  }

  set submittedTxHash(value: Bytes) {
    this.set("submittedTxHash", Value.fromBytes(value));
  }

  get executedTxHash(): Bytes | null {
    let value = this.get("executedTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executedTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("executedTxHash");
    } else {
      this.set("executedTxHash", Value.fromBytes(value as Bytes));
    }
  }

  get cancelledTxHash(): Bytes | null {
    let value = this.get("cancelledTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelledTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelledTxHash");
    } else {
      this.set("cancelledTxHash", Value.fromBytes(value as Bytes));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get updatedAtBlock(): BigInt {
    let value = this.get("updatedAtBlock");
    return value.toBigInt();
  }

  set updatedAtBlock(value: BigInt) {
    this.set("updatedAtBlock", Value.fromBigInt(value));
  }

  get updatedAtBlockHash(): string {
    let value = this.get("updatedAtBlockHash");
    return value.toString();
  }

  set updatedAtBlockHash(value: string) {
    this.set("updatedAtBlockHash", Value.fromString(value));
  }
}
