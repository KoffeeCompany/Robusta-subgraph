// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogCancel extends ethereum.Event {
  get params(): LogCancel__Params {
    return new LogCancel__Params(this);
  }
}

export class LogCancel__Params {
  _event: LogCancel;

  constructor(event: LogCancel) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogOptionBuy extends ethereum.Event {
  get params(): LogOptionBuy__Params {
    return new LogOptionBuy__Params(this);
  }
}

export class LogOptionBuy__Params {
  _event: LogOptionBuy;

  constructor(event: LogOptionBuy) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogOptionCreation extends ethereum.Event {
  get params(): LogOptionCreation__Params {
    return new LogOptionCreation__Params(this);
  }
}

export class LogOptionCreation__Params {
  _event: LogOptionCreation;

  constructor(event: LogOptionCreation) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get option(): LogOptionCreationOptionStruct {
    return this._event.parameters[1].value.toTuple() as LogOptionCreationOptionStruct;
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogOptionCreationOptionStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}

export class LogSettle extends ethereum.Event {
  get params(): LogSettle__Params {
    return new LogSettle__Params(this);
  }
}

export class LogSettle__Params {
  _event: LogSettle;

  constructor(event: LogSettle) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Option__canSettleInputOptionData_Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}

export class Option extends ethereum.SmartContract {
  static bind(address: Address): Option {
    return new Option("Option", address);
  }

  buyers(param0: Bytes): Address {
    let result = super.call("buyers", "buyers(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_buyers(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("buyers", "buyers(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canSettle(
    tokenId_: BigInt,
    optionData_: Option__canSettleInputOptionData_Struct
  ): boolean {
    let result = super.call(
      "canSettle",
      "canSettle(uint256,(address,uint8,int24,uint256,uint256,address,address,uint256)):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromTuple(optionData_)
      ]
    );

    return result[0].toBoolean();
  }

  try_canSettle(
    tokenId_: BigInt,
    optionData_: Option__canSettleInputOptionData_Struct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canSettle",
      "canSettle(uint256,(address,uint8,int24,uint256,uint256,address,address,uint256)):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromTuple(optionData_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashById(param0: BigInt): Bytes {
    let result = super.call("hashById", "hashById(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_hashById(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashById", "hashById(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  taskById(param0: BigInt): Bytes {
    let result = super.call("taskById", "taskById(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_taskById(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("taskById", "taskById(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get gelato_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionManager_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get pokeMe_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get WETH9_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyOptionCall extends ethereum.Call {
  get inputs(): BuyOptionCall__Inputs {
    return new BuyOptionCall__Inputs(this);
  }

  get outputs(): BuyOptionCall__Outputs {
    return new BuyOptionCall__Outputs(this);
  }
}

export class BuyOptionCall__Inputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionData_(): BuyOptionCallOptionData_Struct {
    return this._call.inputValues[1].value.toTuple() as BuyOptionCallOptionData_Struct;
  }
}

export class BuyOptionCall__Outputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class BuyOptionCallOptionData_Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}

export class CancelOptionCall extends ethereum.Call {
  get inputs(): CancelOptionCall__Inputs {
    return new CancelOptionCall__Inputs(this);
  }

  get outputs(): CancelOptionCall__Outputs {
    return new CancelOptionCall__Outputs(this);
  }
}

export class CancelOptionCall__Inputs {
  _call: CancelOptionCall;

  constructor(call: CancelOptionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionData_(): CancelOptionCallOptionData_Struct {
    return this._call.inputValues[1].value.toTuple() as CancelOptionCallOptionData_Struct;
  }
}

export class CancelOptionCall__Outputs {
  _call: CancelOptionCall;

  constructor(call: CancelOptionCall) {
    this._call = call;
  }
}

export class CancelOptionCallOptionData_Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}

export class CreateOptionCall extends ethereum.Call {
  get inputs(): CreateOptionCall__Inputs {
    return new CreateOptionCall__Inputs(this);
  }

  get outputs(): CreateOptionCall__Outputs {
    return new CreateOptionCall__Outputs(this);
  }
}

export class CreateOptionCall__Inputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get optionData_(): CreateOptionCallOptionData_Struct {
    return this._call.inputValues[0].value.toTuple() as CreateOptionCallOptionData_Struct;
  }
}

export class CreateOptionCall__Outputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }
}

export class CreateOptionCallOptionData_Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}

export class SettleOptionCall extends ethereum.Call {
  get inputs(): SettleOptionCall__Inputs {
    return new SettleOptionCall__Inputs(this);
  }

  get outputs(): SettleOptionCall__Outputs {
    return new SettleOptionCall__Outputs(this);
  }
}

export class SettleOptionCall__Inputs {
  _call: SettleOptionCall;

  constructor(call: SettleOptionCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionData_(): SettleOptionCallOptionData_Struct {
    return this._call.inputValues[1].value.toTuple() as SettleOptionCallOptionData_Struct;
  }
}

export class SettleOptionCall__Outputs {
  _call: SettleOptionCall;

  constructor(call: SettleOptionCall) {
    this._call = call;
  }
}

export class SettleOptionCallOptionData_Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get optionType(): i32 {
    return this[1].toI32();
  }

  get strike(): i32 {
    return this[2].toI32();
  }

  get notional(): BigInt {
    return this[3].toBigInt();
  }

  get maturity(): BigInt {
    return this[4].toBigInt();
  }

  get maker(): Address {
    return this[5].toAddress();
  }

  get resolver(): Address {
    return this[6].toAddress();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }
}
